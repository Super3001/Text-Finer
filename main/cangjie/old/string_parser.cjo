package simple_finer

import simple_finer.ext.*

enum SyntaxPattern {
    | SimplePattern(String)
    | RegexPattern(String)
    | NamePattern(String)
    | ConcatPattern(SyntaxPattern, SyntaxPattern)
    | OrPattern(SyntaxPattern, SyntaxPattern)
    | StarPattern(SyntaxPattern)
    | OptPattern(SyntaxPattern)
    | PlusPattern(SyntaxPattern)
}

enum Token {
    | Name(String)
    | Value(String)
    | DefSymbol
    | Modifier(String)
    | Import
    | ImportPath(String)
}

extend Token {
    static func fromLines(strings: List<String>): Result<List<Token>, String> {
        match (tokensFunc(strings).map {t => t[0]}) {
            case Some(l) => Ok(l)
            case None => Err("Invalid Input!")
        }
    }
}

extend Token <: ToString {
    public func toString() {
        "Token{" + match (this) {
            case Name(s) => "Name(" + s + ")"
            case Value(s) => "Value(" + s + ")"
            case DefSymbol => "DefSymbol"
            case Modifier(s) => "Modifier(" + s + ")"
            case Import => "Import"
            case ImportPath(s) => "ImportPath(" + s + ")"
        } + "}"
    }
}

let syntaxDef = Combinator<String, String>.make {
    s => s.contains(" ::= ")
}.map {
    s: String => match (s.split(" ::= ", 2)) {
        case splits where splits.size > 1 =>
            let nameWithModifier = match(splits[0]) {
                case s where s.contains("[") && s.endsWith("]") => 
                    [Name(s.split("[")[0]), Modifier(s.split("[")[1].split("]")[0])]
                case s where s.isAlnum() =>
                    [Name(s)]
                case _ => throw Exception("Name not valid: ${splits[0]}")
            }
            List.fromArray(nameWithModifier.concat([DefSymbol, Value(splits[1])]))
        case _ => throw Exception("Definition value not found: ${s}")
    }
}

let syntaxImport = Combinator<String, String>.make {
    s => s.startsWith("import ") && !s.contains(" ::= ")
}.map {
    s:String => match (s.split(" ", 2)) {
        case splits where splits.size > 1 => List.fromArray([Import, ImportPath(splits[1])])
        case _ => throw Exception("ImportPath value not found")
    }
}

let tokens = syntaxImport.many(0).map {
    l => l.flatten()
}.and(syntaxDef.many(1).map {
    l => l.flatten()
}).map {
    x => x[0].concat(x[1])
}

func tokensFunc(input: List<String>): Option<(List<Token>, List<String>)> {
    tokens.parseFunc(input)
}

public func eval(str: String): Result<Unit, String> {
    println("str: ${str}")
    let lines = str.split("\r\n", removeEmpty: true)
    println("lines: ${lines}")
    Token.fromLines(List<String>.fromArray(lines)).map {l => l.reduce({_, tk => println(tk)}, ())}
    // Ok(())
}